#!/bin/bash

TARGET=${1:?Missing target disk}
IMAGE=${2:?Missing version, such as ArchLinuxARM-rpi-latest.tar.gz or ArchLinuxARM-rpi-2-latest.tar.gz}
MOUNT=/tmp/alarm
HOSTNAMe=${3:?Missing hostname}
TIMEZONE=${4:?Missing timezone name, such as Europe/Amsterdam}

info() {
    echo -e "\n\e[1;33m--> $1\e[0m"
}

error() {
    echo -e "\e[1;31merror: $1\e[0m" >&2
}

# check for root
if [ $(id -u) != 0 ]; then
    error "must be root"
    exit 255
fi

# check target device exists
if ! lsblk $TARGET &> /dev/null; then
    error "$TARGET does not seem to exist"
    exit 255
fi

# check target device is not mounted
if mount | grep -q $TARGET; then
    error "$TARGET seems to be mounted"
    exit 255
fi

# check we have everything
for cmd in curl gpg mkfs.vfat; do
    if ! type -p $cmd &> /dev/null; then
        error "going to need $cmd, make sure it is installed"
        exit 255
    fi
done
if [ "$CHROOT" = "1" ]; then
    if ! type -p arch-chroot &> /dev/null; then
        error "missing arch-chroot, please install arch-install-scripts"
        exit 255
    fi
fi

# download image
if [ ! -f "$IMAGE" ]; then
    info "downloading $IMAGE..."
    curl -L "http://os.archlinuxarm.org/os/$IMAGE" -o "$IMAGE" || exit 1
    curl -L "http://os.archlinuxarm.org/os/$IMAGE.sig" -o "$IMAGE.sig" -s || exit 1
else
    info "trying to download newer version of $IMAGE"
    curl -L "http://os.archlinuxarm.org/os/$IMAGE" -o "$IMAGE" -z "$IMAGE" || exit 2
    curl -L "http://os.archlinuxarm.org/os/$IMAGE.sig" -o "$IMAGE.sig" -z "$IMAGE.sig" -s || exit 2
fi

# get GPG key
info "checking for builder@archlinuxarm.org public key"
if ! gpg --list-public-keys | grep -q 68B3537F39A313B3E574D06777193F152BDBE6A6; then
    info "receiving builder@archlinuxarm.org public key"
    gpg --recv-keys 68B3537F39A313B3E574D06777193F152BDBE6A6 || exit 3
fi

# verify downloaded image
if [ "$VERIFY" != "0" ]; then
    info "verifying signature"
    gpg --verify $IMAGE.sig $IMAGE || exit 4
fi

# partition target device
info "partitioning $TARGET"
sfdisk $TARGET --delete || exit 5
echo -e ",$[512*2048],b\n,,83" | sfdisk $TARGET || exit 6
sleep 0.2 ; sync

# format boot partition
info "formatting boot partition"
mkfs.vfat ${TARGET}1 -n boot || exit 7

# format root partition
info "formatting root partition"
yes | mkfs.ext4 ${TARGET}2 -L root || exit 8

# mount root and boot
info "mounting $TARGET on $MOUNT"
mkdir -p $MOUNT || exit 9
mount ${TARGET}2 $MOUNT || exit 10
mkdir -p $MOUNT/boot || exit 11
mount ${TARGET}1 $MOUNT/boot || exit 12

# extract image
info "extracting $IMAGE to $MOUNT"
bsdtar -xpf $IMAGE -C $MOUNT || true # spams errors about file flags...

# disable systemd-{networkd,resolved,timesyncd}
info "disabling unwanted systemd services"
for unit in dbus-org.freedesktop.network1.service systemd-networkd.service systemd-networkd-wait-online.service systemd-networkd.socket \
            dbus-org.freedesktop.resolve1.service systemd-resolved.service \
            systemd-timesyncd.service; do
    find $MOUNT/etc/systemd/system -name $unit -print -delete
done
find $MOUNT/etc/systemd/system -type d -empty -print -delete

# create empty resolv.conf
info "fixing resolv.conf"
rm -v $MOUNT/etc/resolv.conf
touch $MOUNT/etc/resolv.conf

# set hostname
info "setting hostname to $HOSTNAMe"
echo -n $HOSTNAMe > $MOUNT/etc/hostname

# set timezone
info "setting timezone to $TIMEZONE"
ln -sf ../usr/share/zoneinfo/$TIMEZONE $MOUNT/etc/localtime

# set locale
info "configuring locale"
echo 'en_US.UTF-8 UTF-8' > $MOUNT/etc/locale.gen
echo 'LANG=en_US.UTF-8' > $MOUNT/etc/locale.conf

# install and enable netctl profiles
for profile in $(netctl list | cut -c 3-); do
    info "installing netctl profile $profile"
    cp /etc/netctl/$profile $MOUNT/etc/netctl
    dev=$(awk 'BEGIN { FS="=" }; /^Interface=/ { print $2 }' $MOUNT/etc/netctl/$profile)
    cat > $MOUNT/etc/systemd/system/netctl@$profile.service <<EOF
.include /usr/lib/systemd/system/netctl@.service

[Unit]
BindsTo=sys-subsystem-net-devices-$dev.device
After=sys-subsystem-net-devices-$dev.device
EOF
    ln -s ../netctl@$profile.service $MOUNT/etc/systemd/system/multi-user.target.wants/netctl@$profile.service
done

# configure pacman
info "configuring pacman"
sed -i 's/\[options\]/[options]\nILoveCandy/' $MOUNT/etc/pacman.conf

# install post-install script
info "installing post-install script to $MOUNT/root"
cp alarm-config $MOUNT/root

# run post-install script if so requested
if [ "$CHROOT" = "1" ]; then
    info "running post-install script in chroot"
    arch-chroot $MOUNT /root/alarm-config
fi

# unmount target
if [ "$UNMOUNT" != "0" ]; then
    info "unmounting $TARGET from $MOUNT"
    sync
    umount -R $MOUNT
fi
